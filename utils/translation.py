from googletrans import Translator
import streamlit as st

def translate_text(text):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏"""
    if not text or not isinstance(text, str):
        return text

    try:
        translator = Translator()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
        detected = translator.detect(text)
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏–Ω–∞—á–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        target_lang = 'en' if detected.lang == 'ru' else 'ru'
        
        translation = translator.translate(text, dest=target_lang)
        if translation and hasattr(translation, 'text'):
            return translation.text
        return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        return text

def display_message_with_translation(message, message_hash, avatar, role):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–æ–¥–∞"""
    translation_key = f"translation_{message_hash}"
    
    with st.chat_message(role, avatar=avatar):
        cols = st.columns([0.9, 0.05, 0.05])
        
        with cols[0]:
            message_placeholder = st.empty()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
            if translation_key not in st.session_state:
                st.session_state[translation_key] = {
                    "is_translated": False,
                    "translated_text": None
                }
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç
            if st.session_state[translation_key]["is_translated"]:
                if st.session_state[translation_key]["translated_text"] is None:
                    translated_text = translate_text(message["content"])
                    st.session_state[translation_key]["translated_text"] = translated_text
                message_placeholder.markdown(st.session_state[translation_key]["translated_text"])
            else:
                message_placeholder.markdown(message["content"])
        
        with cols[1]:
            # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            detected_lang = Translator().detect(message["content"]).lang
            tooltip = "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π" if detected_lang == 'ru' else "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
            if st.button("üîÑ", key=f"translate_{message_hash}", help=tooltip):
                st.session_state[translation_key]["is_translated"] = not st.session_state[translation_key]["is_translated"]
                st.rerun()
        
        with cols[2]:
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            if st.button("üóë", key=f"delete_{message_hash}", help="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                return True
    
    return False 