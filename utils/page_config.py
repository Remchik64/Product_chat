from st_pages import Page, show_pages, add_page_title
import streamlit as st
import os

# –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
PAGE_CONFIG = {
    "registr": {
        "name": "–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
        "icon": "üîê",
        "order": 1,
        "show_when_authenticated": False,
        "show_in_menu": False
    },
    "key_input": {
        "name": "–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞",
        "icon": "üîë",
        "order": 2,
        "show_when_authenticated": True
    },
    "app": {
        "name": "–ì–ª–∞–≤–Ω–∞—è",
        "icon": "üè†",
        "order": 3,
        "show_when_authenticated": True
    },
    "new_chat": {
        "name": "–ù–æ–≤—ã–π —á–∞—Ç",
        "icon": "üí≠",
        "order": 4,
        "show_when_authenticated": True,
        "show_in_menu": False
    },
    "profile": {
        "name": "–ü—Ä–æ—Ñ–∏–ª—å",
        "icon": "üë§",
        "order": 5,
        "show_when_authenticated": True
    },
    "admin/generate_tokens": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤",
        "icon": "üîë",
        "order": 6,
        "show_when_authenticated": True,
        "admin_only": True
    }
}

def setup_pages():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state
    if "page_config_initialized" not in st.session_state:
        st.session_state.page_config_initialized = False
        
    is_authenticated = st.session_state.get("authenticated", False)
    is_admin = st.session_state.get("is_admin", False)
    
    pages = []
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–ø–∏—Å–æ–∫
        for page_id, config in sorted(
            PAGE_CONFIG.items(),
            key=lambda x: x[1]["order"]
        ):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            should_show = (
                (not is_authenticated and page_id == "registr") or
                (is_authenticated and config["show_when_authenticated"] and
                 (not config.get("admin_only") or (config.get("admin_only") and is_admin)))
            )
            
            if should_show and config.get("show_in_menu", True):
                page_path = f"pages/{page_id}.py"
                if os.path.exists(page_path):
                    pages.append(
                        Page(
                            page_path,
                            name=config["name"],
                            icon=config["icon"]
                        )
                    )
        
        if not pages:
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            pages.append(
                Page(
                    "pages/registr.py",
                    name=PAGE_CONFIG["registr"]["name"],
                    icon=PAGE_CONFIG["registr"]["icon"]
                )
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        current_pages = str([(p.name, p.icon) for p in pages])
        if not st.session_state.page_config_initialized or st.session_state.get("last_pages") != current_pages:
            show_pages(pages)
            st.session_state.last_pages = current_pages
            st.session_state.page_config_initialized = True
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Error in setup_pages: {str(e)}") 