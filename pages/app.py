import streamlit as st
import requests
import hashlib
from streamlit_extras.switch_page_button import switch_page
from googletrans import Translator
import os
from PIL import Image
import streamlit.components.v1 as components
from tinydb import TinyDB, Query
User = Query()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ Query
from utils.utils import update_remaining_generations
from utils.chat_database import ChatDatabase
from utils.page_config import setup_pages

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
setup_pages()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'username' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º display name
    st.stop()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–∞
user_db = TinyDB('user_database.json')
user_data = user_db.search(User.username == st.session_state.username)

if user_data:
    user_data = user_data[0]
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º session state —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
    st.session_state.active_token = user_data.get('active_token')
    st.session_state.remaining_generations = user_data.get('remaining_generations', 0)
    st.session_state.access_granted = bool(user_data.get('active_token'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
    if not st.session_state.active_token:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
        switch_page("–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º display name
else:
    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º display name

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
chat_db = ChatDatabase(st.session_state.username)

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å)
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')  # –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        st.error(f"–û–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
else:
    assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_profile_image(username):
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                return "üë§"
    return "üë§"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

def get_message_hash(role, content):
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def display_remaining_generations():
    if "remaining_generations" in st.session_state:
        st.sidebar.write(f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {st.session_state.remaining_generations}")

def submit_question():
    if not verify_user_access():
        return
        
    user_input = st.session_state.get('user_input', '')
    if not user_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if st.session_state.remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        switch_page("–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞")
        return
        
    try:
        payload = {"question": user_input}
        response = requests.post('https://flowise-renataraev64.amvera.io/api/v1/prediction/4a4a3f5c-9ebf-4243-8d4f-b3b69dd57313', json=payload)
        output = response.json()
        
        response_text = output.get('text', '')
        if not response_text:
            st.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API.")
            return

        translated_text = translate_text(response_text)
        if not translated_text:
            st.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–≤–µ—Ç–∞.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ session state
        st.session_state.remaining_generations -= 1
        user_db.update({
            'remaining_generations': st.session_state.remaining_generations,
            'token_generations': st.session_state.remaining_generations
        }, User.username == st.session_state.username)
        
        if st.session_state.remaining_generations <= 0:
            user_db.update({
                'active_token': None,
                'remaining_generations': 0,
                'token_generations': 0
            }, User.username == st.session_state.username)
            st.warning("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –¢–æ–∫–µ–Ω –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        display_remaining_generations()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        user_hash = get_message_hash("user", user_input)
        assistant_hash = get_message_hash("assistant", translated_text)

        if "message_hashes" not in st.session_state:
            st.session_state.message_hashes = set()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_hash not in st.session_state.message_hashes:
            st.session_state.message_hashes.add(user_hash)
            user_avatar = get_user_profile_image(st.session_state.username)
            with st.chat_message("user", avatar=user_avatar):
                st.write(user_input)
            chat_db.add_message("user", user_input)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        if assistant_hash not in st.session_state.message_hashes:
            st.session_state.message_hashes.add(assistant_hash)
            with st.chat_message("assistant", avatar=assistant_avatar):
                st.write(translated_text)
            chat_db.add_message("assistant", translated_text)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return

def translate_text(text):
    try:
        translator = Translator()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        if text is None or not isinstance(text, str) or text.strip() == '':
            return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API"
            
        translation = translator.translate(text, dest='ru')
        if translation and hasattr(translation, 'text') and translation.text:
            return translation.text
        return "–û—à–∏–±–∫–∞ –ø–µÔøΩÔøΩ–µ–≤–æ–¥–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        # –æ–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

def clear_chat_history():
    chat_db.clear_history()  # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "message_hashes" in st.session_state:
        del st.session_state["message_hashes"]  # –°–±—Ä–æ—Å —Ö—ç—à–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π

def verify_user_access():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if 'username' not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return False
        
    user_data = user_db.search(User.username == st.session_state.username)
    if not user_data:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return False
        
    if not user_data[0].get('active_token'):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
        switch_page("–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞")
        return False
        
    return True

st.title("–ë–∏–∑–Ω–µ—Å-–ò–¥–µ—è")

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ
display_remaining_generations()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
    clear_chat_history()
    st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_history = chat_db.get_history()
for idx, msg in enumerate(chat_history):
    if msg["role"] == "user":
        avatar = get_user_profile_image(st.session_state.username)
    else:
        avatar = assistant_avatar
    with st.chat_message(msg["role"], avatar=avatar):
        st.write(msg["content"])

# –ü–æ–ª–µ –≤–æ–¥–∞ —Å —Ñ–æ—Ä–º–æ–π
with st.form(key='question_form'):
    st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å", key="user_input")
    submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

if submit_button:
    submit_question()

st.write(f"Streamlit version: {st.__version__}")

# –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∞—Ç-–±–æ—Ç–∞
chat_bot_html = """
<div id="chatbot-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 1000;">
    <div id="flowise-container"></div>
</div>

<script type="module">
    import Chatbot from "https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js"
    Chatbot.init({
        chatflowid: "d3dcc759-d88b-4dce-85c0-2b64d984e863",
        apiHost: "https://flowise-renataraev64.amvera.io",
        chatflowConfig: {
            // topK: 2
        },
        theme: {
            button: {
                backgroundColor: "#3B81F6",
                right: 20,
                bottom: 20,
                size: 52,
                dragAndDrop: true,
                iconColor: "white",
                customIconSrc: "https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg",
            },
            tooltip: {
                showTooltip: true,
                tooltipMessage: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
                tooltipBackgroundColor: 'red',
                tooltipTextColor: 'white',
                tooltipFontSize: 18,
            },
            chatWindow: {
                showTitle: true,
                title: '–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç',
                titleAvatarSrc: 'https://raw.githubusercontent.com/walkxcode/dashboard-icons/main/svg/google-messages.svg',
                showAgentMessages: true,
                welcomeMessage: '–ü—Ä–∏–≤–µ—Ç, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                errorMessage: 'This is a custom error message',
                backgroundColor: "#ffffff",
                height: 400,
                width: 400,
                fontSize: 16,
                expandable: true,
                resizable: true,
                position: 'bottom',
            }
        }
    })

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞
    function updateChatbotPosition() {
        const chatbot = document.getElementById('chatbot-container');
        const scrollY = window.scrollY;
        
        // –ò–∑–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —á–∞—Ç-–±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        chatbot.style.bottom = (20 + scrollY) + 'px';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    window.addEventListener('scroll', updateChatbotPosition);
</script>
"""

# –í—Å—Ç–∞–≤–ª—è–µ–º HTML –∏ JavaScript –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
components.html(chat_bot_html, height=480)
