import streamlit as st
import requests
import hashlib
from streamlit_extras.switch_page_button import switch_page
from googletrans import Translator
import os
from PIL import Image
import streamlit.components.v1 as components
from tinydb import TinyDB, Query
User = Query()  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ Query
from utils.utils import update_remaining_generations, get_data_file_path
from utils.chat_database import ChatDatabase
from utils.page_config import PAGE_CONFIG, setup_pages
from typing import List
from utils.context_manager import ContextManager

# –ö–ª—é—á –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —á–∞—Ç–∞
MAIN_CHAT_SETTINGS_KEY = "main_chat_context_settings"

# –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ë–∏–∑–Ω–µ—Å-–ò–¥–µ—è",
    page_icon="üí°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ API
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    switch_page(PAGE_CONFIG["registr"]["name"])
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
context_manager = ContextManager()
if not context_manager.together_api:
    st.error("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if 'username' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    # –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ False
    st.session_state.authenticated = False
    # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setup_pages()
    # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    st.stop()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–∞
user_db = TinyDB(get_data_file_path('user_database.json'))
user_data = user_db.search(User.username == st.session_state.username)

if user_data:
    user_data = user_data[0]
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º session state —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
    st.session_state.active_token = user_data.get('active_token')
    st.session_state.remaining_generations = user_data.get('remaining_generations', 0)
    st.session_state.access_granted = bool(user_data.get('active_token'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω  —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
    if not st.session_state.active_token:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
        switch_page("–í–≤–æ–¥/–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞")
else:
    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω –Ω–∞–π–¥–µ–Ω")
    st.session_state.authenticated = False
    setup_pages()
    switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
chat_db = ChatDatabase(f"{st.session_state.username}_main_chat")  # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å)
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')  # –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–ª –∏–∫–æ–Ω–∫–∏ –∞—Å—Å—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        st.error(f"–û–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
else:
    assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_profile_image(username):
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                return "üë§"
    return "üë§"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

def get_message_hash(role, content):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def display_remaining_generations():
    if "remaining_generations" in st.session_state:
        st.sidebar.write(f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {st.session_state.remaining_generations}")

def submit_question():
    if not verify_user_access():
        return

    user_input = st.session_state.get('message_input', '').strip()
    if not user_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        return
    
    if st.session_state.remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return

    try:
        with st.spinner('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...'):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            settings = st.session_state.get(MAIN_CHAT_SETTINGS_KEY, {
                "use_context": True,
                "context_messages": 10
            })
            use_context = settings["use_context"]
            context_messages = settings["context_messages"]
            
            chat_context_manager = ContextManager()
            
            if use_context:
                enhanced_message = chat_context_manager.get_context(
                    username=st.session_state.username,
                    message=user_input,
                    flow_id=None
                )
            else:
                enhanced_message = user_input
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
            if "flowise" not in st.secrets or "api_url" not in st.secrets["flowise"]:
                st.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
                return
                
            api_url = st.secrets["flowise"]["api_url"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload
            payload = {
                "question": enhanced_message,
                "overrideConfig": {
                    "returnSourceDocuments": False
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            headers = {
                'Content-Type': 'application/json'
            }
            if "api_key" in st.secrets["flowise"]:
                headers['Authorization'] = f'Bearer {st.secrets["flowise"]["api_key"]}'
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            with st.spinner('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...'):
                try:
                    response = requests.post(
                        api_url,
                        json=payload,
                        headers=headers,
                        timeout=100
                    )
                    
                    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
                    if response.status_code != 200:
                        error_msg = f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code})"
                        try:
                            error_details = response.json()
                            error_msg += f": {error_details.get('error', response.text)}"
                        except:
                            error_msg += f": {response.text}"
                        st.error(error_msg)
                        print(f"API URL: {api_url}")
                        print(f"Response status: {response.status_code}")
                        print(f"Response headers: {response.headers}")
                        print(f"Response body: {response.text}")
                        return
                        
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    output = response.json()
                    response_text = output.get('text', '')
                    
                    if not response_text:
                        st.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                        return
                        
                    # –ü–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    translated_text = translate_text(response_text)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                    with st.chat_message("user", avatar=get_user_profile_image(st.session_state.username)):
                        st.markdown(user_input)
                    
                    with st.chat_message("assistant", avatar=assistant_avatar):
                        st.markdown(translated_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                    chat_db.add_message("user", user_input)
                    chat_db.add_message("assistant", translated_text)
                    update_remaining_generations(st.session_state.username, -1)
                    
                    st.rerun()
                    
                except requests.exceptions.RequestException as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
                    print(f"Network error details: {str(e)}")
                    
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Error details: {type(e).__name__}: {str(e)}")

def translate_text(text):
    try:
        translator = Translator()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
        if text is None or not isinstance(text, str) or text.strip() == '':
            return "–ü–æ–ª—É—á–µ–Ω –ø –æ—Ç–µ—Ç –æ—Ç API"
            
        translation = translator.translate(text, dest='ru')
        if translation and hasattr(translation, 'text') and translation.text:
            return translation.text
        return "–û—à–∏–±–∞ –ø–µ–µ–≤–æ–¥–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"
        
    except Exception as e:
        st.error(f"—à–∏–±–∫–∞ –ø—Ä–∏ –µ—Ä–µ–≤–æ–¥: {str(e)}")
        # –æ–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return f"–û—Ä–∏–≥–∏–Ω–∞–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

def clear_chat_history():
    chat_db.clear_history()  # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "message_hashes" in st.session_state:
        del st.session_state["message_hashes"]  # –°–±—Ä–æ—Å —Ö—ç—à–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π

def verify_user_access():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω
    if 'username' not in st.session_state:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return False
        
    user_data = user_db.search(User.username == st.session_state.username)
    if not user_data:
        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return False
        
    if not user_data[0].get('active_token'):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞")
        switch_page("–í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        return False
        
    return True



def display_assistant_message(content, message_hash):
    with st.chat_message("assistant", avatar=assistant_avatar):
        col1, col2 = st.columns([0.95, 0.05])
        with col1:
            st.markdown(content)
        with col2:
            if st.button("üóë", key=f"del_{message_hash}", help="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                chat_db.delete_message(message_hash)
                if "message_hashes" in st.session_state and message_hash in st.session_state.message_hashes:
                    st.session_state.message_hashes.remove(message_hash)
                st.rerun()

def display_user_message(content, message_hash):
    user_avatar = get_user_profile_image(st.session_state.username)
    with st.chat_message("user", avatar=user_avatar):
        col1, col2 = st.columns([0.95, 0.05])
        with col1:
            st.markdown(content)
        with col2:
            if st.button("üóë", key=f"del_{message_hash}", help="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                chat_db.delete_message(message_hash)
                if "message_hashes" in st.session_state and message_hash in st.session_state.message_hashes:
                    st.session_state.message_hashes.remove(message_hash)
                st.rerun()

def clear_input():
    if 'message_input' in st.session_state:
        st.session_state.pop('message_input')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º pop –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
    chat_db = ChatDatabase(f"{st.session_state.username}_main_chat")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = chat_db.get_history()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º message_hashes, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if "message_hashes" not in st.session_state:
        st.session_state.message_hashes = set()
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—ç—à–∏
        for message in chat_history:
            message_hash = get_message_hash(message["role"], message["content"])
            st.session_state.message_hashes.add(message_hash)
    
    # –û–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    for message in chat_history:
        message_hash = get_message_hash(message["role"], message["content"])
        if message["role"] == "assistant":
            display_assistant_message(message["content"], message_hash)
        else:
            display_user_message(message["content"], message_hash)
    
    st.title("–ë–∏–∑–Ω–µ—Å-–ò–¥–µ—è")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—ÇÔøΩÔøΩ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ
    display_remaining_generations()

    # –î–æ–±–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
    if "main_clear_chat_confirm" not in st.session_state:
        st.session_state.main_clear_chat_confirm = False

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    if st.sidebar.button(
        "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç" if not st.session_state.main_clear_chat_confirm else "‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        type="secondary" if not st.session_state.main_clear_chat_confirm else "primary",
        key="main_clear_chat_button"
    ):
        if st.session_state.main_clear_chat_confirm:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            chat_db.clear_history()
            st.session_state.main_clear_chat_confirm = False
            st.rerun()
        else:
            # –ü–µ—Ä–≤–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            st.session_state.main_clear_chat_confirm = True
            st.sidebar.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if st.session_state.main_clear_chat_confirm:
        if st.sidebar.button("–û—Ç–º–µ–Ω–∞", key="main_cancel_clear"):
            st.session_state.main_clear_chat_confirm = False
            st.rerun()

    # –æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
    st.sidebar.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if MAIN_CHAT_SETTINGS_KEY not in st.session_state:
        st.session_state[MAIN_CHAT_SETTINGS_KEY] = {
            "use_context": True,
            "context_messages": 10
        }

    # –ù—Å—Ç—Ä–æ–π–∫ –∫–æ—Ç–µ–∫—Å—Ç–∞
    use_context = st.sidebar.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏",
        value=st.session_state[MAIN_CHAT_SETTINGS_KEY]["use_context"],
        key=f"{MAIN_CHAT_SETTINGS_KEY}_use_context"
    )

    if use_context:
        context_messages = st.sidebar.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            min_value=3,
            max_value=30,
            value=st.session_state[MAIN_CHAT_SETTINGS_KEY]["context_messages"],
            key=f"{MAIN_CHAT_SETTINGS_KEY}_slider",
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
        )

    # –û–±–Ω–æ–≤–ª–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session_state
    st.session_state[MAIN_CHAT_SETTINGS_KEY].update({
        "use_context": use_context,
        "context_messages": context_messages if use_context else 10
    })

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
    user_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        height=100,
        key="message_input",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å..."
    )

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_message", use_container_width=True)
    with col2:
        clear_button = st.button("–û—á–∏—Å—Ç–∏—Ç—å", key="clear_input", on_click=clear_input, use_container_width=True)
    with col3:
        cancel_button = st.button("–û—Ç–º–µ–Ω–∏—Ç—å", key="cancel_request", use_container_width=True)
        if cancel_button:
            clear_input()
            st.rerun()

    # –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if send_button:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
        if user_input and user_input.strip():
            st.session_state['_last_input'] = user_input
            with st.spinner('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...'):
                submit_question()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+Enter
    if user_input and user_input.strip():
        if st.session_state.get('ctrl_enter_pressed', False):
            st.session_state['_last_input'] = user_input
            with st.spinner('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...'):
                submit_question()
                st.session_state.ctrl_enter_pressed = False

    # JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Ctrl+Enter
    st.markdown("""
        <script>
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'Enter') {
                window.parent.postMessage({
                    type: 'streamlit:setComponentValue',
                    key: 'ctrl_enter_pressed',
                    value: true
                }, '*');
            }
        });
        </script>
        """, unsafe_allow_html=True)

    st.write(f"Streamlit version: {st.__version__}")

if __name__ == "__main__":
    main()
