import streamlit as st
import requests
from time import sleep
import hashlib
import os
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã",
    page_icon="üí¨",
    layout="wide"
)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API
MAX_API_RESPONSES = 5

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        assistant_avatar = "ü§ñ"
else:
    assistant_avatar = "ü§ñ"

def get_user_profile_image(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                return "üë§"
    return "üë§"

def get_user_chat_id():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_email = st.session_state.get("email", "")
    if not user_email:
        return "default-chat-session"
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π chat_id –Ω–∞ –æ—Å–Ω–æ–≤–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = hashlib.md5(user_email.encode()).hexdigest()
    return f"chat-{chat_id}"

def get_user_messages_key():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_email = st.session_state.get("email", "")
    if not user_email:
        return "messages"
    return f"messages_{hashlib.md5(user_email.encode()).hexdigest()}"

def get_api_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL API –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not hasattr(st.secrets, 'flowise'):
            st.error("–°–µ–∫—Ü–∏—è 'flowise' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ secrets.toml")
            return None
            
        if not hasattr(st.secrets.flowise, 'api_base_url'):
            st.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'api_base_url' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ flowise")
            return None
            
        if not hasattr(st.secrets.flowise, 'simple_chat_id'):
            st.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'simple_chat_id' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ü–∏–∏ flowise")
            return None

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL API –∏ ID —á–∞—Ç–∞ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
        api_base_url = st.secrets.flowise.api_base_url
        chat_id = st.secrets.flowise.simple_chat_id
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"API Base URL: {api_base_url}")
        print(f"Chat ID: {chat_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
        full_url = f"{api_base_url}/{chat_id}"
        print(f"Full URL: {full_url}")
        
        return full_url
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL API: {str(e)}")
        # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –≤ secrets: {dir(st.secrets)}")
        if hasattr(st.secrets, 'flowise'):
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ flowise: {dir(st.secrets.flowise)}")
        return None

def query(question):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π URL API
        api_url = get_api_url()
        if not api_url:
            st.error("API URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Flowise —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        payload = {
            "question": question,
            "overrideConfig": {
                "temperature": 0.7,
                "modelName": "mistral",  # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
                "maxTokens": 2000,       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                "systemMessage": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á Together AI
        if "together" in st.secrets and "api_key" in st.secrets["together"]:
            headers["Authorization"] = f"Bearer {st.secrets.together.api_key}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"Sending request to: {api_url}")
        print(f"Payload: {payload}")
        print(f"Headers: {headers}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
        response = requests.post(api_url, json=payload, headers=headers, timeout=60)
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if response.status_code == 500:
            error_data = response.json()
            error_message = error_data.get('message', 'Unknown error')
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error_message}")
            print(f"Server error details: {error_data}")
            return None
            
        if response.status_code != 200:
            st.error(f"–û—à–∏–±–∫–∞ API (–∫–æ–¥ {response.status_code}): {response.text}")
            return None
            
        try:
            result = response.json()
            if not result or 'text' not in result:
                st.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                print(f"API response: {result}")
                return None
            return result
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            print(f"Response content: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        print(f"Request error details: {str(e)}")
        return None
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Unexpected error details: {str(e)}")
        return None

def count_api_responses():
    """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç API –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
    messages_key = get_user_messages_key()
    return sum(1 for msg in st.session_state[messages_key] if msg["role"] == "assistant")

def sidebar_content():
    """–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    with st.sidebar:
        st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if st.session_state.get("email"):
            user_avatar = get_user_profile_image(st.session_state.get("username", ""))
            col1, col2 = st.columns([1, 3])
            with col1:
                st.image(user_avatar, width=50)
            with col2:
                st.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {st.session_state.get('email')}")
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–µ
        responses_count = count_api_responses()
        st.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: {responses_count}/{MAX_API_RESPONSES}")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress = responses_count / MAX_API_RESPONSES
        st.progress(progress)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", use_container_width=True):
            messages_key = get_user_messages_key()
            st.session_state[messages_key] = []
            st.rerun()

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not st.session_state.get("authenticated", False):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API URL
    if not get_api_url():
        st.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: API URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üí¨ –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç")
    st.markdown("---")

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages_key = get_user_messages_key()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ session state –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if messages_key not in st.session_state:
        st.session_state[messages_key] = []
        
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    sidebar_content()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
    for message in st.session_state[messages_key]:
        if message["role"] == "assistant":
            with st.chat_message("assistant", avatar=assistant_avatar):
                st.markdown(message["content"])
        else:
            user_avatar = get_user_profile_image(st.session_state.get("username", ""))
            with st.chat_message("user", avatar=user_avatar):
                st.markdown(message["content"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤
    if count_api_responses() >= MAX_API_RESPONSES:
        st.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è.")
        return

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state[messages_key].append({"role": "user", "content": prompt})
        user_avatar = get_user_profile_image(st.session_state.get("username", ""))
        with st.chat_message("user", avatar=user_avatar):
            st.markdown(prompt)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        with st.chat_message("assistant", avatar=assistant_avatar):
            message_placeholder = st.empty()
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                response = query(prompt)
                
                if response:
                    full_response = response.get("text", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
                    message_placeholder.markdown(full_response)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state[messages_key].append({"role": "assistant", "content": full_response})
                else:
                    message_placeholder.markdown("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")

if __name__ == "__main__":
    main() 