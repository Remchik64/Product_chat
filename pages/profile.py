import streamlit as st
from streamlit_extras.switch_page_button import switch_page
from tinydb import TinyDB, Query
import os
from PIL import Image
from utils.utils import check_token_status, format_database
from utils.page_config import setup_pages, PAGE_CONFIG
import hashlib
import io
import mimetypes
from utils.security import hash_password, is_strong_password
import requests
from googletrans import Translator
from utils.chat_database import ChatDatabase
from utils.context_manager import ContextManager
from utils.utils import update_remaining_generations
import streamlit.components.v1 as components

# –ü–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥ st.set_page_config()
def is_valid_image(file_content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    try:
        Image.open(io.BytesIO(file_content))
        return True
    except Exception:
        return False

# –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ!)
st.set_page_config(
    page_title="–ü—Ä–æ—Ñ–∏–ª—å",
    page_icon="üë§",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# HTML –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
chat_bot_html = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <div id="chatbot-container" style="width: 100%; height: 600px;">
        <script type="module">
            import Chatbot from "https://cdn.jsdelivr.net/npm/flowise-embed/dist/web.js"
            Chatbot.init({
                chatflowid: "28d13206-3a4d-4ef8-80e6-50b671b5766c",
                apiHost: "https://flowise-renataraev64.amvera.io",
                chatflowConfig: {
                    // topK: 2
                },
                theme: {
                    button: {
                        backgroundColor: "#32333f",
                        right: 20,
                        bottom: 20,
                        size: 48,
                        dragAndDrop: true,
                        iconColor: "#fffcfc",
                        customIconSrc: "",
                        autoWindowOpen: {
                            autoOpen: true,
                            openDelay: 0,
                            autoOpenOnMobile: true,
                        },
                    },
                    chatWindow: {
                        showTitle: true,
                        title: '–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
                        titleAvatarSrc: '',
                        showAgentMessages: true,
                        welcomeMessage: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                        errorMessage: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                        backgroundColor: "#32333f",
                        height: 700,
                        width: 400,
                        fontSize: 16,
                        showCloseButton: false,
                        alwaysOpen: true,
                        starterPromptFontSize: 15,
                        clearChatOnReload: false,
                        botMessage: {
                            backgroundColor: "#1e1e2d",
                            textColor: "#fffcfc",
                            showAvatar: false,
                            avatarSrc: "",
                        },
                        userMessage: {
                            backgroundColor: "#444654",
                            textColor: "#fffcfc",
                            showAvatar: true,
                            avatarSrc: "https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png",
                        },
                        textInput: {
                            placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å',
                            backgroundColor: '#1e1e2d',
                            textColor: '#fffcfc',
                            sendButtonColor: '#32333f',
                            maxChars: 1000,
                            maxCharsWarningMessage: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.',
                            autoFocus: true,
                            sendMessageSound: true,
                            receiveMessageSound: true,
                        },
                        feedback: {
                            color: '#fffcfc',
                        },
                        footer: {
                            textColor: '#fffcfc',
                            text: '',
                            company: '',
                            companyLink: 'https://startintellect.ru',
                        }
                    }
                }
            })

        </script>
    </div>
</body>
</html>
"""

# –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç-–±–æ—Ç–∞ –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    components.html(chat_bot_html, height=700, scrolling=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    setup_pages()
    switch_page(PAGE_CONFIG["registr"]["name"])
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_db = TinyDB('user_database.json')

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_IMAGES_DIR = 'profile_images'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
if not os.path.exists(PROFILE_IMAGES_DIR):
    os.makedirs(PROFILE_IMAGES_DIR)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
User = Query()
user_data = user_db.search(User.username == st.session_state.username)
if not user_data:
    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.is_admin = False
    st.rerun()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º rerun –≤–º–µ—Å—Ç–æ switch_page

user_data = user_data[0]
# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º session state —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã
if user_data.get('active_token'):
    st.session_state.active_token = user_data['active_token']
    st.session_state.remaining_generations = user_data.get('remaining_generations', 0)

st.title(f"–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç {user_data['username']}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
st.header("")
st.write(f"Email: {user_data['email']}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
st.subheader("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
if user_data.get('profile_image') and os.path.exists(user_data['profile_image']):
    st.image(user_data['profile_image'], width=150)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    if st.button("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è"):
        old_image_path = user_data.get('profile_image')
        if old_image_path and old_image_path != os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png"):
            if os.path.exists(old_image_path):
                try:
                    os.remove(old_image_path)
                    st.success("–°—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        user_db.update({'profile_image': None}, User.username == st.session_state.username)
        st.success("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–∞")
        st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
else:
    st.write("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
if user_data.get('active_token'):
    st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    remaining_generations = user_data.get('remaining_generations', 0)
    
    if remaining_generations > 0:
        st.success(f"–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {remaining_generations}")
    else:
        st.warning("–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
else:
    st.warning("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω.")
    if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"):
        switch_page(PAGE_CONFIG["key_input"]["name"])

# –ó–æ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
st.header("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
new_username = st.text_input("–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=user_data['username'])
new_email = st.text_input("–ù–æ–≤—ã–π email", value=user_data['email'])
new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
new_profile_image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è", type=["png", "jpg", "jpeg"])
if new_profile_image is not None:
    st.image(new_profile_image, width=150)
    updates = {}
    needs_reload = False

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        MAX_FILE_SIZE = 2 * 1024 * 1024  # 2MB
        if new_profile_image.size > MAX_FILE_SIZE:
            st.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2MB.")
            st.stop()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if not is_valid_image(new_profile_image.getbuffer()):
            st.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            st.stop()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_extension = os.path.splitext(new_profile_image.name)[1].lower()
        image_filename = f"{user_data['username']}{file_extension}"
        image_path = os.path.join(PROFILE_IMAGES_DIR, image_filename)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        old_image_path = user_data.get('profile_image')
        if old_image_path and old_image_path != os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png"):
            if os.path.exists(old_image_path):
                try:
                    os.remove(old_image_path)
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(image_path, "wb") as f:
            f.write(new_profile_image.getbuffer())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            img = Image.open(new_profile_image)
            img.verify()
            updates['profile_image'] = image_path
            needs_reload = True
        except Exception as e:
            st.error("–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            if os.path.exists(image_path):
                os.remove(image_path)
            st.stop()

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        st.stop()

if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    updates = {}
    needs_reload = False
    old_username = user_data['username']

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email
    if new_username and new_username != old_username:
        existing_user = user_db.get(User.username == new_username)
        if existing_user:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            updates['username'] = new_username
            needs_reload = True

    if new_email and new_email != user_data['email']:
        updates['email'] = new_email
        needs_reload = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if new_password:
        if new_password != confirm_password:
            st.error("–ü—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        else:
            is_strong, message = is_strong_password(new_password)
            if not is_strong:
                st.error(message)
            else:
                updates['password'] = hash_password(new_password)
                needs_reload = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
    if new_profile_image is not None:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if new_profile_image.size > 2 * 1024 * 1024:  # 2MB
                st.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2MB.")
                st.stop()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(new_profile_image.name)[1].lower()
            image_filename = f"{old_username}{file_extension}"
            image_path = os.path.join(PROFILE_IMAGES_DIR, image_filename)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            old_image_path = user_data.get('profile_image')
            if old_image_path and old_image_path != os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png"):
                if os.path.exists(old_image_path):
                    try:
                        os.remove(old_image_path)
                    except Exception as e:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with open(image_path, "wb") as f:
                f.write(new_profile_image.getbuffer())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img = Image.open(new_profile_image)
            img.verify()
            updates['profile_image'] = image_path
            needs_reload = True

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            if 'image_path' in locals() and os.path.exists(image_path):
                os.remove(image_path)
            st.stop()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if updates:
        try:
            user_db.update(updates, User.username == old_username)
            format_database()
            
            if 'username' in updates:
                st.session_state.username = updates['username']
            
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            if needs_reload:
                st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

# –ó–æ–Ω–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
if st.button("–í—ã–π—Ç–∏"):
    st.session_state.authenticated = False
    st.session_state.username = None
    st.session_state.active_token = None
    st.session_state.remaining_generations = 0
    st.session_state.is_admin = False  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    setup_pages()
    switch_page(PAGE_CONFIG["registr"]["name"])

# –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.markdown(
    """
    <style>
        section[data-testid="stSidebar"] {
            width: 450px !important;
            max-width: 450px !important;
        }
        section[data-testid="stSidebarContent"] {
            width: 400px !important;
            max-width: 400px !important;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
user_db = TinyDB('user_database.json')
User = Query()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
context_manager = ContextManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
chat_db = ChatDatabase(f"{st.session_state.username}_profile_chat")

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        assistant_avatar = "ü§ñ"
else:
    assistant_avatar = "ü§ñ"

def get_user_profile_image(username):
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                return "üë§"
    return "üë§"

def get_message_hash(role, content):
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def translate_text(text):
    try:
        translator = Translator()
        if text is None or not isinstance(text, str) or text.strip() == '':
            return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
            
        translation = translator.translate(text, dest='ru')
        if translation and hasattr(translation, 'text') and translation.text:
            return translation.text
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        return f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
PROFILE_CHAT_SETTINGS_KEY = "profile_chat_context_settings"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if PROFILE_CHAT_SETTINGS_KEY not in st.session_state:
    st.session_state[PROFILE_CHAT_SETTINGS_KEY] = {
        "use_context": True,
        "context_messages": 10
    }

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
main_container = st.container()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
with main_container:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    chat_history = chat_db.get_history()
    for message in chat_history:
        if message["role"] == "assistant":
            with st.chat_message("assistant", avatar=assistant_avatar):
                st.markdown(message["content"])
        else:
            with st.chat_message("user", avatar=get_user_profile_image(st.session_state.username)):
                st.markdown(message["content"])

    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    def submit_message(user_input):
        if not user_input:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
            
        if remaining_generations <= 0:
            st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_hash = get_message_hash("user", user_input)
        if "message_hashes" not in st.session_state:
            st.session_state.message_hashes = set()
            
        if user_hash not in st.session_state.message_hashes:
            st.session_state.message_hashes.add(user_hash)
            with st.chat_message("user", avatar=get_user_profile_image(st.session_state.username)):
                st.markdown(user_input)
            chat_db.add_message("user", user_input)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        with st.chat_message("assistant", avatar=assistant_avatar):
            with st.spinner('–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç...'):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    use_context = st.session_state[PROFILE_CHAT_SETTINGS_KEY]["use_context"]
                    context_messages = st.session_state[PROFILE_CHAT_SETTINGS_KEY]["context_messages"]
                    
                    if use_context:
                        enhanced_message = context_manager.get_context(
                            st.session_state.username,
                            user_input,
                            last_n_messages=context_messages
                        )
                    else:
                        enhanced_message = user_input
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                    payload = {
                        "question": enhanced_message
                    }
                    
                    response = requests.post(
                        "https://flow.simplegpt.ru/api/v1/prediction/7bd1a0a0-4315-4b56-bb6d-0d5738eed59d",
                        json=payload,
                        timeout=100
                    )
                    
                    if response.status_code != 200:
                        st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                        return
                        
                    output = response.json()
                    response_text = output.get('text', '')
                    
                    if not response_text:
                        st.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                        return
                    
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                    translated_text = translate_text(response_text)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                    st.markdown(translated_text)
                    
                    assistant_hash = get_message_hash("assistant", translated_text)
                    if assistant_hash not in st.session_state.message_hashes:
                        st.session_state.message_hashes.add(assistant_hash)
                        chat_db.add_message("assistant", translated_text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–µ—Ä–∞—Ü–∏–π
                    update_remaining_generations(st.session_state.username, -1)
                    st.rerun()
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

