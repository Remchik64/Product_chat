import streamlit as st
import requests
import json
import os
from PIL import Image
import hashlib
from utils.utils import verify_user_access, update_remaining_generations, get_data_file_path
from utils.chat_database import ChatDatabase
from tinydb import TinyDB, Query
from googletrans import Translator
from utils.context_manager import ContextManager
from datetime import datetime
from utils.page_config import setup_pages

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
setup_pages()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
context_manager = ContextManager()
if not context_manager.together_api:
    st.error("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–µ–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        assistant_avatar = "ü§ñ"
else:
    assistant_avatar = "ü§ñ"

def get_message_hash(role, content):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def display_message_with_delete(message, role):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–æ–º–µ—Ä–æ–º"""
    message_hash = get_message_hash(role, message["content"])
    avatar = assistant_avatar if role == "assistant" else get_user_profile_image(st.session_state.username)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    current_chat_db = ChatDatabase(f"{st.session_state.username}_{st.session_state.current_chat_flow['id']}")
    history = current_chat_db.get_history()
    message_number = history.index(message) + 1  # +1 –¥–ª—è —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
    
    with st.chat_message(role, avatar=avatar):
        col1, col2, col3 = st.columns([0.05, 0.90, 0.05])
        
        with col1:
            st.write(f"#{message_number}")
            
        with col2:
            st.markdown(message["content"])
            
        with col3:
            # –î–µ–ª–∞–µ–º –∫–ª—é—á –∫–Ω–æ–ø–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –¥–æ–±–∞–≤–ª—è—è role –∏ message_number
            button_key = f"del_{role}_{message_hash}_{message_number}"
            if st.button("üóëÔ∏è", key=button_key, help="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"):
                current_chat_db.delete_message(message_hash)
                if "message_hashes" in st.session_state:
                    st.session_state.message_hashes.remove(message_hash)
                st.rerun()

def get_user_profile_image(username):
    for ext in ['png', 'jpg', 'jpeg']:
        image_path = os.path.join(PROFILE_IMAGES_DIR, f"{username}.{ext}")
        if os.path.exists(image_path):
            try:
                return Image.open(image_path)
            except Exception as e:
                return "üë§"
    return "üë§"

def translate_text(text):
    try:
        translator = Translator()
        if text is None or not isinstance(text, str) or text.strip() == '':
            return "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API"
            
        translation = translator.translate(text, dest='ru')
        if translation and hasattr(translation, 'text') and translation.text:
            return translation.text
        return "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        return f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
def save_chat_flow(username, flow_id, flow_name=None):
    user = user_db.get(User.username == username)
    if not user:
        return False
        
    chat_flows = user.get('chat_flows', [])
    
    if not flow_name:
        flow_name = f"–ß–∞—Ç {len(chat_flows) + 1}"
    else:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
        try:
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≤ UTF-8, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if not isinstance(flow_name, str):
                flow_name = str(flow_name)
            flow_name = flow_name.encode('utf-8').decode('utf-8')
        except:
            try:
                flow_name = flow_name.encode('cp1251').decode('utf-8')
            except:
                pass
    
    new_flow = {
        'id': flow_id,
        'name': flow_name,
        'created_at': datetime.now().isoformat()
    }
    
    chat_flows.append(new_flow)
    user_db.update({'chat_flows': chat_flows}, User.username == username)
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç-–ø–æ—Ç–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_chat_flows(username):
    user = user_db.get(User.username == username)
    if not user:
        return []
    
    chat_flows = user.get('chat_flows', [])
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏–º–µ–Ω —á–∞—Ç–æ–≤
    for flow in chat_flows:
        try:
            name = flow['name']
            if not isinstance(name, str):
                name = str(name)
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≤ UTF-8, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            flow['name'] = name.encode('utf-8').decode('utf-8')
        except:
            try:
                flow['name'] = name.encode('cp1251').decode('utf-8')
            except:
                pass
    
    return chat_flows

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
def clear_chat_history(username, flow_id):
    chat_db = ChatDatabase(f"{username}_{flow_id}")
    chat_db.clear_history()
    if "message_hashes" in st.session_state:
        del st.session_state.message_hashes
    st.rerun()

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ clear_chat_history

def delete_chat_flow(username, flow_id):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_db.get(User.username == username)
    if not user:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    chat_flows = user.get('chat_flows', [])
    
    # –£–¥–∞–ª—è–µ–º —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    chat_flows = [flow for flow in chat_flows if flow['id'] != flow_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_db.update({'chat_flows': chat_flows}, User.username == username)
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_db = ChatDatabase(f"{username}_{flow_id}")
    chat_db.clear_history()
    
    return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
user_db = TinyDB(get_data_file_path('user_database.json'))
User = Query()

st.title("–õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
user = user_db.get(User.username == st.session_state.username)
if user:
    remaining_generations = user.get('remaining_generations', 0)
    st.sidebar.metric("–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:", remaining_generations)
    
    if remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        st.stop()

# –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
NEW_CHAT_SETTINGS_KEY = "new_chat_context_settings"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ session_state –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if NEW_CHAT_SETTINGS_KEY not in st.session_state:
    st.session_state[NEW_CHAT_SETTINGS_KEY] = {
        "use_context": True,
        "context_range": (1, 10)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    }

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
use_context = st.sidebar.checkbox(
    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏",
    value=st.session_state[NEW_CHAT_SETTINGS_KEY]["use_context"],
    key=f"{NEW_CHAT_SETTINGS_KEY}_use_context"
)

if use_context:
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
    if 'current_chat_flow' in st.session_state:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        current_chat_db = ChatDatabase(f"{st.session_state.username}_{st.session_state.current_chat_flow['id']}")
        history = current_chat_db.get_history()
        max_messages = len(history) if history else 60
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑ session_state –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_range = st.session_state[NEW_CHAT_SETTINGS_KEY].get("context_range", (1, 10))
        
        context_range = st.sidebar.slider(
            "–î–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            min_value=1,
            max_value=max(30, max_messages),
            value=current_range,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            step=1,
            key=f"{NEW_CHAT_SETTINGS_KEY}_range",
            help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session_state
        st.session_state[NEW_CHAT_SETTINGS_KEY].update({
            "use_context": use_context,
            "context_range": context_range
        })
    else:
        st.sidebar.warning("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
else:
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∫–ª—é—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state[NEW_CHAT_SETTINGS_KEY].update({
        "use_context": False,
        "context_range": (1, 10)
    })

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
st.sidebar.markdown("---")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞–º–∏")

# –í—ã–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
chat_flows = get_user_chat_flows(st.session_state.username)
if chat_flows:
    flow_names = [flow['name'] for flow in chat_flows]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    current_index = 0
    if 'current_chat_flow' in st.session_state:
        try:
            current_flow_name = st.session_state.current_chat_flow['name']
            if current_flow_name in flow_names:
                current_index = flow_names.index(current_flow_name)
        except:
            current_index = 0
    
    selected_flow_name = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
        flow_names,
        index=current_index
    )
    
    selected_flow = next(
        (flow for flow in chat_flows if flow['name'] == selected_flow_name),
        chat_flows[0]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
    if ('current_chat_flow' not in st.session_state or 
        st.session_state.current_chat_flow['id'] != selected_flow['id']):
        # –û–±–Ω–æ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        st.session_state.current_chat_flow = selected_flow
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —á–∞—Ç–∞
        if "message_hashes" in st.session_state:
            del st.session_state.message_hashes
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        st.rerun()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
st.sidebar.markdown("---")
with st.sidebar.expander("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç"):
    new_flow_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")
    new_flow_id = st.text_input(
        "ID —á–∞—Ç-–ø–æ—Ç–æ–∫–∞:",
        help="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∏–º–µ—Ä: 28d13206-3a4d-4ef8-80e6-50b671b5766c –∏–ª–∏ –∑–∞–∫–∂–∏—Ç–µ —Å–±–æ—Ä–∫—É —á–∞—Ç–∞ –≤ https://t.me/startintellect"
    )
    
    if st.button("–°–æ–∑–¥–∞—Ç—å") and new_flow_id:
        if save_chat_flow(st.session_state.username, new_flow_id, new_flow_name):
            st.session_state.current_chat_flow = {
                'id': new_flow_id,
                'name': new_flow_name or f"–ß–∞—Ç {len(chat_flows) + 1}"
            }
            chat_db = ChatDatabase(f"{st.session_state.username}_{new_flow_id}")
            st.success("–ù–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!")
            st.rerun()

# –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
if "new_chat_clear_confirm" not in st.session_state:  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
    st.session_state.new_chat_clear_confirm = False   # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
if "new_chat_delete_confirm" not in st.session_state: # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
    st.session_state.new_chat_delete_confirm = False  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á

# –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
if st.sidebar.button(
    "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç" if not st.session_state.new_chat_clear_confirm else "‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
    type="secondary" if not st.session_state.new_chat_clear_confirm else "primary",
    key="new_chat_clear_button"  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
):
    if st.session_state.new_chat_clear_confirm:
        if 'current_chat_flow' in st.session_state:
            clear_chat_history(st.session_state.username, st.session_state.current_chat_flow['id'])
            st.session_state.new_chat_clear_confirm = False  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
            st.rerun()
    else:
        st.session_state.new_chat_clear_confirm = True  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
        st.sidebar.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

# –ó–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
if st.sidebar.button(
    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç" if not st.session_state.new_chat_delete_confirm else "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞",
    type="secondary" if not st.session_state.new_chat_delete_confirm else "primary",
    key="new_chat_delete_button"  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
):
    if st.session_state.new_chat_delete_confirm:
        if 'current_chat_flow' in st.session_state:
            if delete_chat_flow(st.session_state.username, st.session_state.current_chat_flow['id']):
                st.sidebar.success("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                if 'current_chat_flow' in st.session_state:
                    del st.session_state.current_chat_flow
                if 'message_hashes' in st.session_state:
                    del st.session_state.message_hashes
                st.session_state.new_chat_delete_confirm = False  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
                st.rerun()
    else:
        st.session_state.new_chat_delete_confirm = True  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
        st.sidebar.warning("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –¥–ª—è –æ–±–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
if st.session_state.new_chat_clear_confirm or st.session_state.new_chat_delete_confirm:  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á–∏
    if st.sidebar.button("–û—Ç–º–µ–Ω–∞", key="new_chat_cancel_action"):  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
        st.session_state.new_chat_clear_confirm = False   # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
        st.session_state.new_chat_delete_confirm = False  # –ò–∑–º–µ–Ω–∏–ª–∏ –∫–ª—é—á
        st.rerun()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç-–ø–æ—Ç–æ–∫–∞
if 'current_chat_flow' not in st.session_state:
    st.info("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è")
    st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
if 'current_chat_flow' in st.session_state:
    chat_name = st.session_state.current_chat_flow['name']
    try:
        if not isinstance(chat_name, str):
            chat_name = str(chat_name)
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≤ UTF-8, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        chat_name = chat_name.encode('utf-8').decode('utf-8')
    except:
        try:
            chat_name = chat_name.encode('cp1251').decode('utf-8')
        except:
            pass
    
    st.markdown(f"### üí¨ {chat_name}")
    st.markdown("---")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    current_chat_db = ChatDatabase(f"{st.session_state.username}_{st.session_state.current_chat_flow['id']}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    chat_history = current_chat_db.get_history()
    for message in chat_history:
        display_message_with_delete(message, message["role"])

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def submit_message(user_input):
    if not user_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
        
    if remaining_generations <= 0:
        st.error("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω.")
        return
        
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    current_chat_id = st.session_state.current_chat_flow['id']
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    chat_history_key = f"{st.session_state.username}_{current_chat_id}_history"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    chat_db = ChatDatabase(f"{st.session_state.username}_{current_chat_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_hash = get_message_hash("user", user_input)
    if "message_hashes" not in st.session_state:
        st.session_state.message_hashes = set()
        
    if user_hash not in st.session_state.message_hashes:
        st.session_state.message_hashes.add(user_hash)
        with st.chat_message("user", avatar=get_user_profile_image(st.session_state.username)):
            st.markdown(user_input)
        chat_db.add_message("user", user_input)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    settings = st.session_state.get(NEW_CHAT_SETTINGS_KEY, {
        "use_context": True,
        "context_range": (1, 10)
    })
    use_context = settings["use_context"]
    context_range = settings["context_range"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    with st.chat_message("assistant", avatar=assistant_avatar):
        with st.spinner('–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç...'):
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                chat_context_manager = ContextManager()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                if use_context:
                    enhanced_message = chat_context_manager.get_context(
                        username=st.session_state.username,
                        message=user_input,
                        flow_id=current_chat_id,
                        context_range=context_range  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    )
                else:
                    enhanced_message = user_input
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
                api_url = f"{st.secrets['flowise']['base_url']}/api/v1/prediction/{current_chat_id}"
                
                payload = {
                    "question": enhanced_message,
                    "overrideConfig": {
                        "returnSourceDocuments": False,
                        "model": "together_ai",  # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
                        "temperature": 0.7,
                        "maxTokens": 2000
                    }
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                response = requests.post(
                    api_url,
                    json=payload,
                    timeout=100,
                    headers={
                        'Content-Type': 'application/json',
                        'Origin': st.secrets['flowise']['base_url'],
                        'User-Agent': 'Streamlit-Client'
                    }
                )
                
                if response.status_code != 200:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                    return
                
                try:
                    output = response.json()
                except json.JSONDecodeError:
                    st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")
                    return
                    
                response_text = output.get('text', '')
                
                if not response_text:
                    st.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    return
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                translated_text = translate_text(response_text)
                
                # –û–±—Ä–∞–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
                st.markdown(translated_text)
                
                assistant_hash = get_message_hash("assistant", translated_text)
                if assistant_hash not in st.session_state.message_hashes:
                    st.session_state.message_hashes.add(assistant_hash)
                    chat_db.add_message("assistant", translated_text)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
                update_remaining_generations(st.session_state.username, -1)
                st.rerun()
                
            except requests.exceptions.ConnectionError:
                st.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
            except requests.exceptions.Timeout:
                st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            except requests.exceptions.RequestException:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            except Exception:
                st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
input_container = st.container()

def clear_input():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    st.session_state.message_input = ""

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
user_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    height=100,
    key="message_input",
    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∑–¥–µ—Å—å..."  
)

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
col1, col2, col3 = st.columns(3)
    
with col1:
    send_button = st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_message", use_container_width=True)
with col2:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º on_click –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    clear_button = st.button("–û—á–∏—Å—Ç–∏—Ç—å", key="clear_input", on_click=clear_input, use_container_width=True)
with col3:
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback
    cancel_button = st.button("–û—Ç–º–µ–Ω–∏—Ç—å", key="cancel_request", on_click=clear_input, use_container_width=True)

# –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
if send_button:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —è–≤–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
    if user_input and user_input.strip():
        st.session_state['_last_input'] = user_input
        submit_message(user_input)